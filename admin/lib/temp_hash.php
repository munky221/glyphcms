<html>
<head>
<title>Hash Generator</title>
<link href='http://fonts.googleapis.com/css?family=Bitter:400,700,400italic' rel='stylesheet' type='text/css'>
<style>
html,body {
	width: 100%;
	height: 100%;
	margin: 0;
	padding: 0;
	font-family: 'Bitter', 'serif';
}
#wrapper {
	padding: 10px;
}
#results h4 {
	display: block;
	margin: 0;
	padding: 0;
}
#results h1 {
	display: block;
	margin: 0;
	padding: 0;
	width: 100%;
	overflow: hidden;
	word-wrap:break-word;
}
</style>
</head>
<body>
<div id="wrapper">
<?php
/*
 * Generate a secure hash for a given password. The cost is passed
 * to the blowfish algorithm. Check the PHP manual page for crypt to
 * find more information about this setting.
 */
function generate_hash($password, $cost=11){
        /* To generate the salt, first generate enough random bytes. Because
         * base64 returns one character for each 6 bits, the we should generate
         * at least 22*6/8=16.5 bytes, so we generate 17. Then we get the first
         * 22 base64 characters
         */
       	$salt=substr(base64_encode(openssl_random_pseudo_bytes(17)),0,22);
        /* As blowfish takes a salt with the alphabet ./A-Za-z0-9 we have to
         * replace any '+' in the base64 string with '.'. We don't have to do
         * anything about the '=', as this only occurs when the b64 string is
         * padded, which is always after the first 22 characters.
         */
        $salt=str_replace("+",".",$salt);
        /* Next, create a string that will be passed to crypt, containing all
         * of the settings, separated by dollar signs
         */
        $param='$'.implode('$',array(
                "2y", //select the most secure version of blowfish (>=PHP 5.3.7)
                str_pad($cost,2,"0",STR_PAD_LEFT), //add the cost in two digits
                $salt //add the salt
        ));
       
        //now do the actual hashing
        return crypt($password,$param);
}
 
/*
 * Check the password against a hash generated by the generate_hash
 * function.
 */
function validate_pw($password, $hash){
        /* Regenerating the with an available hash as the options parameter should
         * produce the same hash if the same password is passed.
         */
        return crypt($password, $hash)==$hash;
}

if (isset($_POST['cost'])) {
	if ($_POST['cost'] == "")
		$cost = "11";
	else
		$cost = $_POST['cost'];
} else {
	$cost = "11";
}


if (isset($_POST['action'])) {

	if ($_POST['action'] == 'hash') {

		if ($_POST['string'] != "")
			$string = $_POST['string'];
		else
			$string = "none";

		if ($_POST['cost'] != "")
			$cost = $_POST['cost'];
		else
			$cost = "11";

		$hash = generate_hash($string, $cost);
		$results =  "<h4>Hashed string: </h4><h1>" . $hash . "</h1><hr>";
	} else if ($_POST['action'] == 'verify') {

		if ($_POST['string'] != "")
			$string = $_POST['string'];
		else
			$string = "none";

		if ($_POST['hashed'] != "")
			$hashed = $_POST['hashed'];
		else
			$hashed = "none";

		$results = "<h1>Hashed Validated: ";
		if (validate_pw($string, $hashed))
			$results .= "True";
		else
			$results .= "False";
		$results .= "</h1><hr>";
	}
}
?>

<div id="results"><?php if (isset($results)) echo $results; ?></div>

<form action="" method="post">
	<h2>Generate Hash</h2>
	<input type="hidden" name="action" value="hash">
	<div>
		<label for="string">String: </label><input type="text" name="string" value="<?php if (isset($_POST['string'])) { echo $_POST['string']; } ?>" style="width:140px;">
		<label for="cost">Cost: </label><input type="text" name="cost" value="<?php echo $cost; ?>" style="width:100px;">
		<button type="submit" name="submit">Submit</button>
	</div>
</form>

<hr>

<form action="" method="post">
	<h2>Validate Hash</h2>
	<input type="hidden" name="action" value="verify">
	<div>
		<label for="string">String: </label><input type="text" name="string" value="<?php if (isset($_POST['string'])) { echo $_POST['string']; } ?>" style="width:140px;"><br><br>
		<label for="hashed">Hashed String: </label><br><textarea name="hashed" cols="50" rows="5" style="width:300px;"><?php if (isset($_POST['hashed'])) { echo $_POST['hashed']; } ?></textarea><br>
		<button type="submit" name="submit">Submit</button>
	</div>
</form>
</div>
</body>
</html>